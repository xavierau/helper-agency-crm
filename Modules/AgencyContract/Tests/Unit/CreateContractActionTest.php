<?php

namespace Modules\AgencyContract\Tests\Unit;

use Illuminate\Foundation\Testing\DatabaseMigrations;
use Illuminate\Support\Str;
use Modules\AgencyContract\Actions\CreateContract;
use Modules\AgencyContract\DataTransferObjects\ContractData;
use Modules\AgencyContract\Entities\ContractType;
use Modules\AgencyCore\Database\Seeders\AgencyCoreWorkflowSeeder;
use Modules\AgencyCore\Entities\Address;
use Modules\AgencyCore\Entities\Applicant;
use Modules\AgencyCore\Entities\Client;
use Modules\AgencyCore\Entities\Job;
use Modules\AgencyCore\Entities\Requirement;
use Illuminate\Foundation\Testing\WithFaker;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Tests\TestCase;

class CreateContractActionTest extends TestCase
{
    use RefreshDatabase;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $this->setUpContractType();
        $this->setUpWorkflow();
    }

    /**
     * A basic unit test example.
     *
     * @return void
     */
    public function testExample()
    {

        $client = factory(Client::class)->create();

        $address = factory(Address::class)->create();

        $requirement1 = factory(Requirement::class)->create();

        $requirement2 = factory(Requirement::class)->create();

        $job = factory(Job::class)->create();

        $formData = [];

        $contractNumber = Str::random();

        $formData['status'] = 'pending';
        $formData['contract_number'] = $contractNumber;
        $formData['internal_code'] = Str::random();
        $formData['salary'] = 5000;
        $formData['food_subsidy'] = 500;
        $formData['client_id'] = $client->id;
        $formData['address_id'] = $address->id;
        $formData['requirement_id'] = $requirement1->id;
        $formData['requirement_id'] = $requirement2->id;
        $formData['job_id'] = $job->id;
        $formData['applicant_id'] = factory(Applicant::class)->create()->id;


        $action = new CreateContract();
        $dto = ContractData::fromFormData($formData);

        $action->execute($dto);

        $this->assertDatabaseHas('contracts', [
            'contract_number' => $contractNumber
        ]);
    }

    function setUpContractType()
    {
        collect(["Overseas", "Local"])
            ->each(fn($l) => ContractType::create(['label' => $l]));
    }

    function setUpWorkflow()
    {
        app(AgencyCoreWorkflowSeeder::class)->createWorkflow();
    }
}
